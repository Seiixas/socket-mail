This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
.python-version
pyproject.toml
src/client.py
src/models.py
src/server.py

================================================================
Files
================================================================

================
File: .gitignore
================
# Python-generated files
__pycache__/
*.py[oc]
build/
dist/
wheels/
*.egg-info

# Virtual environments
.venv

================
File: .python-version
================
3.12

================
File: pyproject.toml
================
[project]
name = "ifmail"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12"
dependencies = []

================
File: src/client.py
================
import pickle
import socket

from models import MessageType, Message, ResponseCode  # Import MessageType enum


class Client:
    def __init__(self):
        self.sock = None
        self.menu_options = [('1. Configure server', self.register_server)]
        self.connected_to_server = False
        self.current_user = None

    def register_server(self):
        while True:
            server_address = input('Server address (e.g., 127.0.0.1): ').strip()
            server_port_str = input('Server port (e.g., 8000): ').strip()

            if not server_address or not server_port_str:
                print("Server address and port cannot be empty.")
                continue

            if not server_port_str.isdigit():
                print("Invalid port number. Please enter digits only.")
                continue

            server_port = int(server_port_str)

            if not 1 <= server_port <= 65535:
                print("Port number must be between 1 and 65535.")
                continue

            host = (server_address, server_port)

            try:
                self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                self.sock.connect(host)
                self.connected_to_server = True

                print(f'Connected to server at {server_address}:{server_port}!')

                self.menu_options = [
                    ('1. Configure server', self.register_server),  # Still keep it for reconfiguration
                    ('2. Sign-Up', self.register_account),
                    ('3. Sign-In', self.access_email),
                    ('4. Exit', self.exit_client),
                ]
                break

            except socket.error as e:
                print(f'Could not connect to server: {e}')
                self.sock = None
                self.connected_to_server = False
                try_again = input("Try again? (yes/no): ").strip().lower()
                if try_again != 'yes':
                    break

    def register_account(self):
        if not self.connected_to_server:
            print("Not connected to server. Please configure server first.")
            return

        while True:  # Loop for input validation
            name = input('Your Name: ').strip()
            username = input('Account Username (alphanumeric only): ').strip()
            password = input('Account Password (min 8 characters): ').strip()

            if not name:
                print("Name cannot be empty.")
                continue
            if not username:
                print("Username cannot be empty.")
                continue
            if not username.isalnum():
                print("Username must be alphanumeric.")
                continue
            if len(password) < 8:
                print("Password must be at least 8 characters long.")
                continue

            try:
                data = {'name': name, 'username': username, 'password': password}
                message = Message(MessageType.REGISTER, data)  # Use MessageType enum
                data_enc = pickle.dumps(message)

                self.sock.sendall(data_enc)  # Use sendall to ensure complete sending
                result_enc = self.sock.recv(1024)

                if not result_enc:
                    print("Server disconnected.")
                    self.connected_to_server = False
                    self.menu_options = [('1. Configure server', self.register_server)]
                    break

                result: Message = pickle.loads(result_enc)
                print(result.content)

                break

            except socket.error as e:
                print(f'Error communicating with server during registration: {e}')
                self.connected_to_server = False
                self.menu_options = [('1. Configure server', self.register_server)]
                break
            except pickle.PickleError as e:
                print(f'Error during serialization/deserialization: {e}')
                break

    def access_email(self):
        if not self.connected_to_server:
            print("Not connected to server. Please configure server first.")
            return

        username = input('Account Username: ').strip()
        password = input('Account Password: ').strip()

        data = {'username': username, 'password': password}

        message = Message(MessageType.LOGIN, data)
        message_enc = pickle.dumps(message)

        self.sock.send(message_enc)
        result: Message = pickle.loads(self.sock.recv(1024))

        if result.response_code == ResponseCode.SUCCESS:
            self.current_user = username

    def exit_client(self):
        if self.connected_to_server and self.sock:
            try:
                message = Message(MessageType.DISCONNECT, None)  # Use MessageType enum
                self.sock.sendall(pickle.dumps(message))  # Send disconnect message
                self.sock.close()
            except socket.error as e:
                print(f"Error sending disconnect message: {e}")
            finally:
                print("Exiting client.")
                exit()
        else:
            print("Exiting client.")
            exit()

    def menu(self):
        print("\nOptions:")

        for option_text, _ in self.menu_options:
            print(option_text)

        while True:
            selected = input('Select an option: ').strip()

            if not selected:
                print("Please select an option.")
                continue

            option_map = {str(i + 1): func for i, (_, func) in enumerate(self.menu_options)}

            if selected in option_map:
                return option_map[selected]
            else:
                print(f'Invalid selection! Please choose from the options listed.')


if __name__ == '__main__':
    client = Client()

    print("------------------- IFMail -------------------")

    while True:
        action = client.menu()
        if action:
            action()

================
File: src/models.py
================
from enum import Enum


class ResponseCode(Enum):
    SUCCESS = 0
    ERROR = 1


class MessageType(Enum):
    DISCONNECT = -1
    REGISTER = 0
    LOGIN = 1


class Message:
    type: MessageType
    content: any

    def __init__(self, message_type: MessageType, content: any, response_code: ResponseCode = None):
        self.type = message_type
        self.content = content
        self.response_code = response_code

    def __repr__(self):
        return f'{self.type.name}: {self.content}'

================
File: src/server.py
================
import pickle
import socket
import threading

import bcrypt

from models import MessageType, Message, ResponseCode

users = {}
mails = {}


# Hash a password
def hash_password(password: str) -> str:
    salt = bcrypt.gensalt()
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), salt)

    return hashed_password.decode('utf-8')

# Password verification
def verify_password(password: str, hashed: str) -> bool:
    return bcrypt.checkpw(password.encode('utf-8'), hashed.encode('utf-8'))

# User registration
def register_user(name: str, username: str, password: str) -> tuple[str, ResponseCode]:
    if username in users:
        return "Error: Username already exists.", ResponseCode.ERROR

    if not username.isalnum():
        return "Error: Username must only contain letters and numbers.", ResponseCode.ERROR

    if len(password) < 8:
        return "Error: Password must be at least 8 characters long.", ResponseCode.ERROR

    users[username] = {
        "name": name,
        "password": hash_password(password),
    }

    print(f"User registered: {username}")

    return "Registration successful!", ResponseCode.SUCCESS

# User login
def authenticate_user(username: str, password: str) -> tuple[str, ResponseCode]:
    """Authenticates an existing user."""

    if username not in users:
        return "Error: Invalid username or password.", ResponseCode.ERROR

    if not verify_password(password, users[username]["password"]):
        return "Error: Invalid username or password.", ResponseCode.ERROR

    return f"Welcome {users[username]['name']}!", ResponseCode.SUCCESS

# Handle received clients
def client_handler(conn: socket.socket, addr):
    """Handles communication with a single client."""

    print(f"Connection from {addr} handled by thread: {threading.current_thread().name}")  # Log thread info

    try:
        while True:
            data = conn.recv(1024)
            if not data:  # Handle client disconnection gracefully
                print(f"Client {addr} disconnected.")
                break

            try:
                message = pickle.loads(data)

                if not isinstance(message, Message):
                    response_message = Message(MessageType.DISCONNECT, "Error: Invalid message format.")
                    conn.sendall(pickle.dumps(response_message))
                    continue

                # Message handling

                if message.type == MessageType.DISCONNECT:
                    print(f"Client {addr} requested disconnection.")
                    conn.close()
                    break
                elif message.type == MessageType.REGISTER:
                    message, response_code = register_user(**message.content)
                    response_message = Message(MessageType.REGISTER, message, response_code)
                elif message.type == MessageType.LOGIN:
                    message, response_code = authenticate_user(**message.content)
                    response_message = Message(MessageType.LOGIN, message, response_code)
                else:
                    response_message = Message(MessageType.DISCONNECT,
                                               "Error: Unknown request type.", ResponseCode.ERROR)

                conn.sendall(pickle.dumps(response_message))

            except pickle.PickleError:
                print(f"PickleError from {addr}. Possible data corruption.")
                response_message = Message(MessageType.DISCONNECT, "Error: Could not understand message.",
                                           ResponseCode.ERROR)
                conn.sendall(pickle.dumps(response_message))
                break
            except Exception as e:
                print(f"Server error handling client {addr}: {e}")
                response_message = Message(MessageType.DISCONNECT, "Error: Server encountered an error.",
                                           ResponseCode.ERROR)
                conn.sendall(pickle.dumps(response_message))
                break

    except socket.error as e:
        print(f"Socket error with client {addr}: {e}")
    finally:
        conn.close()
        print(f"Connection to {addr} closed.")

def start_server(host: str, port: int):
    """Starts the server and listens for incoming connections."""

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        server_socket.bind((host, port))
    except socket.error as e:
        print(f"Error binding socket: {e}")
        return None

    server_socket.listen()

    print(f"Server started on {host}:{port} - listening for connections...")

    while True:
        try:
            conn, addr = server_socket.accept()
            print(f"Connected to {addr}")

            thread = threading.Thread(target=client_handler, args=(conn, addr),
                                      daemon=True)
            thread.start()
        except socket.error as e:
            print(f"Socket accept error: {e}")
            break
        except KeyboardInterrupt:
            print("Server shutting down due to keyboard interrupt.")
            break
        finally:
            server_socket.close()
            print("Server socket closed.")


if __name__ == '__main__':
    HOST = "0.0.0.0"
    PORT = 8000

    start_server(HOST, PORT)



================================================================
End of Codebase
================================================================
